plugins {
	id 'fabric-loom' version '1.6-SNAPSHOT'
	id 'maven-publish'
}

version = project.mod_version
group = project.maven_group

base {
	archivesName = project.archives_base_name
}

repositories {
	// Add repositories to retrieve artifacts from in here.
	// You should only use this when depending on other mods because
	// Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
	// See https://docs.gradle.org/current/userguide/declaring_repositories.html
	// for more information about repositories.
}

loom {
	splitEnvironmentSourceSets()

	mods {
		"otel" {
			sourceSet sourceSets.main
			sourceSet sourceSets.client
		}
	}

}

def minecraft_version = System.env.MINECRAFT_VERSION
assert minecraft_version != null : "You must specify the environment variable 'MINECRAFT_VERSION'"
def yarn_mappings_version = System.env.YARN_MAPPINGS_VERSION
assert yarn_mappings_version != null : "You must specify the environment variable 'YARN_MAPPINGS_VERSION'"
def fabric_loader_version = System.env.FABRIC_LOADER_VERSION
assert fabric_loader_version != null : "You must specify the environment variable 'FABRIC_LOADER_VERSION'"

dependencies {
	// To change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${minecraft_version}"
	mappings "net.fabricmc:yarn:${yarn_mappings_version}:v2"
	modImplementation "net.fabricmc:fabric-loader:${fabric_loader_version}"

	implementation "io.opentelemetry.instrumentation:opentelemetry-log4j-appender-2.17:${project.otel_log4j_appender_version}"
    implementation "io.opentelemetry.instrumentation:opentelemetry-instrumentation-api:${project.otel_instrumentation_version}"
    implementation "io.opentelemetry.instrumentation:opentelemetry-instrumentation-api-incubator:${project.otel_instrumentation_version}-alpha"
    implementation "io.opentelemetry:opentelemetry-api:${project.otel_stack_version}"
    implementation "io.opentelemetry:opentelemetry-api-incubator:${project.otel_stack_version}-alpha"
    implementation "io.opentelemetry:opentelemetry-context:${project.otel_stack_version}"
	implementation "io.opentelemetry.semconv:opentelemetry-semconv:${project.otel_semconv_version}"
    implementation "io.opentelemetry:opentelemetry-exporter-otlp:${project.otel_stack_version}"
    implementation "io.opentelemetry:opentelemetry-exporter-otlp-common:${project.otel_stack_version}"
    implementation "io.opentelemetry:opentelemetry-exporter-common:${project.otel_stack_version}"
    implementation "io.opentelemetry:opentelemetry-exporter-sender-okhttp:${project.otel_stack_version}"
    implementation "com.squareup.okhttp3:okhttp:${project.okhttp_version}"
    implementation "com.squareup.okio:okio:${project.okio_version}"
    implementation "com.squareup.okio:okio-jvm:${project.okio_version}"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-common:${project.kotlin_stdlib_common_version}"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:${project.kotlin_stdlib_stack_version}"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:${project.kotlin_stdlib_stack_version}"
    implementation "org.jetbrains.kotlin:kotlin-stdlib:${project.kotlin_stdlib_stack_version}"
    implementation "org.jetbrains:annotations:${project.jetbrains_annotations_version}"

	include "io.opentelemetry.instrumentation:opentelemetry-log4j-appender-2.17:${project.otel_log4j_appender_version}"
    include "io.opentelemetry.instrumentation:opentelemetry-instrumentation-api:${project.otel_instrumentation_version}"
    include "io.opentelemetry.instrumentation:opentelemetry-instrumentation-api-incubator:${project.otel_instrumentation_version}-alpha"
    include "io.opentelemetry:opentelemetry-api:${project.otel_stack_version}"
    include "io.opentelemetry:opentelemetry-api-incubator:${project.otel_stack_version}-alpha"
    include "io.opentelemetry:opentelemetry-context:${project.otel_stack_version}"
	include "io.opentelemetry.semconv:opentelemetry-semconv:${project.otel_semconv_version}"
    include "io.opentelemetry:opentelemetry-exporter-otlp:${project.otel_stack_version}"
    include "io.opentelemetry:opentelemetry-exporter-otlp-common:${project.otel_stack_version}"
    include "io.opentelemetry:opentelemetry-exporter-common:${project.otel_stack_version}"
    include "io.opentelemetry:opentelemetry-exporter-sender-okhttp:${project.otel_stack_version}"
    include "com.squareup.okhttp3:okhttp:${project.okhttp_version}"
    include "com.squareup.okio:okio:${project.okio_version}"
    include "com.squareup.okio:okio-jvm:${project.okio_version}"
    include "org.jetbrains.kotlin:kotlin-stdlib-common:${project.kotlin_stdlib_common_version}"
    include "org.jetbrains.kotlin:kotlin-stdlib-jdk8:${project.kotlin_stdlib_stack_version}"
    include "org.jetbrains.kotlin:kotlin-stdlib-jdk7:${project.kotlin_stdlib_stack_version}"
    include "org.jetbrains.kotlin:kotlin-stdlib:${project.kotlin_stdlib_stack_version}"
    include "org.jetbrains:annotations:${project.jetbrains_annotations_version}"
}

processResources {
	inputs.property "version", project.version
    inputs.property "minecraft_version", minecraft_version
    inputs.property "fabric_loader_version", fabric_loader_version

	filesMatching("fabric.mod.json") {
		expand "version": project.version, "minecraft_version": minecraft_version, "fabric_loader_version": fabric_loader_version
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = 21
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()

	sourceCompatibility = JavaVersion.VERSION_21
	targetCompatibility = JavaVersion.VERSION_21
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.base.archivesName.get()}"}
	}
}

// configure the maven publication
publishing {
	publications {
		create("mavenJava", MavenPublication) {
			artifactId = project.archives_base_name
			from components.java
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {
		// Add repositories to publish to here.
		// Notice: This block does NOT have the same function as the block in the top level.
		// The repositories here will be used for publishing your artifact, not for
		// retrieving dependencies.
	}
}
